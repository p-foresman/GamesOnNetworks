To Do:
-convert csv files to BLOBs in order to insert into database

Notes:
-look into static_scale_free vs barabasi_albert scale free networks. Which should i be using?
-should i be generating a new graph every iteration? or should each run in an averager use the same graph? (this way, the only randomness would come from the agents' choices)


For DB/DF:
DataFrames:
    -memory state, each row is an agent, each column is a single memory index for the given agent.
    -corresponding memory state tags dataframe?

    alternatively:
    -DB tables:
        -game types (always bargaining game for now): id, name, payoff_matrix (could just rebuild this based on name?), strategies (this is implicit in matrix)
        -graph types: id, type, (params? might want to have graph params here? could have params in a lower level table of graphs which points to graph types table?)
        -graphs: id, graph type, params (this table may be unncecessary)
        -simulations (sim specific things): id, game type (FK), graph type/graph (FK), params json, graph fadlist, 
        -agents: id, simulation (FK), agent json
-Second dataframe for 
-In database, columns include:
    -grouping ID (to find all simulation instances from a cohort of simulations)
    -random number generator state
    -simulation parameters (JSON?)
        -must be a simplified version to describe a single simulation case (no iterators)****
    -graph parameters (JSON?)
    -graph adjacency matrix (in DataFrame -> CSV)
    -agent JSON list?

    

For saving and restoring random number generator state:

julia> rand()
0.09028876420540066

julia> state = copy(Random.default_rng())
MersenneTwister(0xacbf17e36353b3a3a75764abc1e03e06, (0, 1002, 0, 2))

julia> rand()
0.5688115492566419

julia> copy!(Random.default_rng(), state)
MersenneTwister(0xacbf17e36353b3a3a75764abc1e03e06, (0, 1002, 0, 2))

julia> rand()
0.5688115492566419



Sampling distribution:
-The sampling distribution of the random variable "transition time" will be different for a sample size of
    1 agent, 10 agents (or some cluster), and the total population (say 100 agents).
    Could construct histograms/sampling distributions for each of these emergent layers (with many replications)
    and compare the results.
